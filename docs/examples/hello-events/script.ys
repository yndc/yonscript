use IO

print "Hello, events!"

# Define the message data
event Payload 
    hello String
    sender String 

# Write a system that appends the sender into the message (event mutation happens)
system Formatter 
    mutates event Message
    (event) => 
        event.message = `{event.sender} says {event.message}`

# Write a system that prints out the message to console
system Printer
    reads event Message
    (event) =>
        emit IO.Print event.message

# Emit events using the `emit` keyword
emit Message { message: "hello!", sender: "yonder" }    # Will print "yonder says hello!"
emit Message { message: "world!", sender: "yonder" }    # Will print "yonder says world!"
emit Message { message: "hi!", sender: "socks" }        # Will print "socks says hi!"
emit Message { message: "bye!", sender: "evan" }        # Will print "evan says bye!"
